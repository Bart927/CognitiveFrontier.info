---
description: 
globs: 
alwaysApply: true
---
# Основные правила проекта

## Стилизация
- Используй BEM методологию для именования классов
- НЕ используй CSS Modules или Tailwind
- Все стили должны быть в .scss файлах
- Используй переменные и миксины из @/assets/styles/_variables.scss и @/assets/styles/_mixins.scss

## Компоненты
- Каждый компонент в отдельной директории
- Имена компонентов в PascalCase
- Экспорт через index.ts
- Обязательная типизация пропсов через interface
- Для общих компонентов обязательна история в Storybook

## TypeScript
- strict: true
- Явное указание типов для всех параметров функций
- Избегай any и unknown
- Используй type вместо interface для простых типов
- Экспортируй типы в отдельных файлах `ComponentName.types.ts`

## React Best Practices
- Функциональные компоненты с хуками
- Мемоизация через useMemo и useCallback для оптимизации
- Избегай вложенных тернарных операторов
- Деструктуризация пропсов
- Используй правильные типы событий (React.MouseEvent и т.д.)

## Zustand Store
- Атомарные сторы для разных доменов
- Типизация всех экшенов и состояний
- Селекторы для получения данных
- Документируй сложную логику

## Тестирование
- Тестируй поведение, не реализацию
- Следуй принципу AAA
- Используй семантичные селекторы
- Snapshot тесты для UI компонентов

## Git
- Коммиты на английском
- Conventional Commits (feat:, fix:, docs:, etc.)
- Ветки feature/* для новых функций
- Ветки fix/* для исправлений
- Squash перед мержем

## Документация
- JSDoc для всех публичных функций
- README для каждого значимого компонента
- Storybook stories с примерами использования
- Поддерживай актуальность документации

## Структура файлов
```
src/
  ├── app/              # App Router pages
  ├── components/       # React компоненты
  │   ├── common/       # Общие компоненты
  │   ├── layout/       # Компоненты макета
  │   └── [feature]/    # Компоненты функционала
  ├── stores/           # Zustand stores
  ├── hooks/            # Кастомные хуки
  ├── utils/            # Утилиты
  └── types/            # TypeScript типы


